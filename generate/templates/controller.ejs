import { StatusCodes } from "http-status-codes";
import { successResponse } from "../../utils/response.util.js";
import <%= pascal %> from "./<%= original %>.model.js";

export const createUser = async(req, res, next) => {
  const { <%= createBody %> } = req.body;
  const data = await <%= pascal %>.create({ <%= createBody %> });
  return successResponse(res, {
    statusCode: StatusCodes.CREATED,
    metadata: {
      timeStamp: new Date(),
    },
  });
};


export const readUsers = async(req, res, next) => {
  const data = await <%= pascal %>.find({});
  return successResponse(res, {
    statusCode: StatusCodes.OK,
    metadata: {
      timeStamp: new Date(),
    },
  });
};

export const readUser = async(req, res, next) => {
  const { id } = req.params;
  const data = await <%= pascal %>.findById(id);
  return successResponse(res, {
    statusCode: StatusCodes.OK,
    metadata: {
      timeStamp: new Date(),
    },
  });
};

export const updateUser = async(req, res, next) => {
  const { id } = req.params;
  const { <%= updateBody %> } = req.body;
  const data = await <%= pascal %>.findByIdAndUpdate(id, { <%= updateBody %> });
  return successResponse(res, {
    statusCode: StatusCodes.OK,
    metadata: {
      timeStamp: new Date(),
    },
  });
};

export const deleteUser = async(req, res, next) => {
  const { id } = req.params;
  const data = await <%= pascal %>.findByIdAndDelete(id);
  return successResponse(res, {
    statusCode: StatusCodes.OK,
    metadata: {
      timeStamp: new Date(),
    },
  });
};