import { StatusCodes } from "http-status-codes";
import { successResponse } from "../../utils/response.util.js";
import <%= pascal %> from "./<%= original %>.model.js";

export const create<%= pascal %> = async(req, res, next) => {
  const { <%= createBody %> } = req.body;
  const data = await <%= pascal %>.create({ <%= createBody %> });
  return successResponse(res, {
    statusCode: StatusCodes.CREATED,
    message: "<%= originalCapital %> created successfully",
    metadata: {
      timeStamp: new Date(),
    },
  });
};


export const read<%= pascal %>s = async(req, res, next) => {
  const data = await <%= pascal %>.find({});
  return successResponse(res, {
    statusCode: StatusCodes.OK,
    message: "<%= originalCapital %>s fetched successfully",
    data: data,
    metadata: {
      timeStamp: new Date(),
    },
  });
};

export const read<%= pascal %> = async(req, res, next) => {
  const { id } = req.params;
  const data = await <%= pascal %>.findById(id);
  return successResponse(res, {
    statusCode: StatusCodes.OK,
    message: "<%= originalCapital %> fetched successfully",
    data: data,
    metadata: {
      timeStamp: new Date(),
    },
  });
};

export const update<%= pascal %> = async(req, res, next) => {
  const { id } = req.params;
  const { <%= updateBody %> } = req.body;
  const data = await <%= pascal %>.findByIdAndUpdate(id, { <%= updateBody %> });
  return successResponse(res, {
    statusCode: StatusCodes.OK,
    message: "<%= originalCapital %> updated successfully",
    data: data,
    metadata: {
      timeStamp: new Date(),
    },
  });
};

export const delete<%= pascal %> = async(req, res, next) => {
  const { id } = req.params;
  const data = await <%= pascal %>.findByIdAndDelete(id);
  return successResponse(res, {
    statusCode: StatusCodes.OK,
    message: "<%= originalCapital %> deleted successfully",
    metadata: {
      timeStamp: new Date(),
    },
  });
};